version: '3.8'

x-carp-base-config: &carp-base-config
  networks:
    - carp
  restart: always
  
x-keycloak-dev-commands: &keycloak-dev-commands
  command:
    - start-dev
    - --db=postgres
    - --features=token-exchange
    - "--db-url=jdbc:postgresql://carp-postgres-${PROFILE}:5432/keycloak"
    - "--db-username=${ADMIN_USER}"
    - "--db-password=${ADMIN_PASSWORD}"
    - "--import-realm"

x-keycloak-prod-commands: &keycloak-prod-commands
  command:
    - start
    - --db=postgres
    - --features=token-exchange
    - "--db-url=jdbc:postgresql://carp-postgres-${PROFILE}:5432/keycloak"
    - "--db-username=${ADMIN_USER}"
    - "--db-password=${ADMIN_PASSWORD}"
    - "--import-realm"

# Apply the following configuration if hosting behind a reverse proxy
#    - "--hostname-url=${KC_URL}"
#    - "--hostname-admin-url=${KC_URL}"
#    - "--proxy edge

services:
  carp-ws:
    <<: *carp-base-config
    build:
      dockerfile: Dockerfile
    container_name: "carp-ws-${PROFILE}"
    environment:
      - "SPRING_PROFILES_ACTIVE=${PROFILE}"
      - "JAVA_OPTS=-Xmx1g -Xms1g -XX:MaxPermSize=512m"
    env_file:
      - .env
    image: "carp-ws:${PROFILE}"
    ports:
      - "${CAWS_PORT}:8080"
    profiles:
      - production
      - staging
      - testing
      - development
    volumes:
      - "/data/carp/storage/${PROFILE}:/home/carp/storage/${PROFILE}"

  rabbitmq: &rabbitmq
    <<: *carp-base-config
    container_name: "carp-rabbitmq-${PROFILE}"
    environment:
      - "RABBITMQ_DEFAULT_USER=${ADMIN_USER}"
      - "RABBITMQ_DEFAULT_PASS=${ADMIN_PASSWORD}"
    hostname: "rabbitmq-${PROFILE}"
    image: rabbitmq:3-management
    profiles:
      - production
      - staging
      - testing
      - development
    volumes:
      - rabbitmq:/var/lib/rabbitmq/data
      - ./deployment/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./deployment/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins

  rabbitmq-local:
    <<: *rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    profiles:
      - local

  postgres: &postgres
    <<: *carp-base-config
    container_name: "carp-postgres-${PROFILE}"
    environment:
      - "POSTGRES_USER=${ADMIN_USER}"
      - "POSTGRES_PASSWORD=${ADMIN_PASSWORD}"
      - PGDATA=/var/lib/postgresql/data
    hostname: "carp-postgres-${PROFILE}"
    image: postgres:latest
    profiles:
      - production
      - staging
      - testing
      - development
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-local:
    <<: *postgres
    ports:
      - "5432:5432"
    profiles:
      - local

  keycloak: &keycloak
    <<: [*carp-base-config]
    container_name: "carp-keycloak-${PROFILE}"
    environment:
      - "KEYCLOAK_ADMIN=${ADMIN_USER}"
      - "KEYCLOAK_ADMIN_PASSWORD=${ADMIN_PASSWORD}"
    image: quay.io/keycloak/keycloak:22.0.1
    ports:
      - "${KC_PORT}:8080"
    profiles:
      - base
    volumes:
      - ./deployment/keycloak/carp-realm.json:/opt/keycloak/data/import/carp-realm.json
      - ./deployment/keycloak/carp-theme.jar:/opt/keycloak/providers/carp-theme.jar
      - ./deployment/keycloak/magic-links.jar:/opt/keycloak/providers/magic-links.jar
      - keycloak:/opt/keycloak/data

  keycloak-dev:
    <<: [*keycloak, *keycloak-dev-commands]
    profiles:
      - staging
      - testing
      - development
      - local

  keycloak-prod:
    <<: [*keycloak, *keycloak-prod-commands]
    profiles:
      - production

  prometheus:
    <<: *carp-base-config
    container_name: "carp-prometheus"
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:9090"
    profiles:
      - production
    volumes:
      - ./deployment/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    <<: *carp-base-config
    container_name: "carp-grafana"
    environment:
      - "GF_SECURITY_ADMIN_USER=${ADMIN_USER}"
      - "GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}"
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:3000"
    profiles:
      - production
    volumes:
      - ./deployment/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./deployment/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./deployment/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini

  node-exporter:
    <<: *carp-base-config
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    container_name: "carp-node-exporter"
    image: prom/node-exporter:latest
    profiles:
      - production
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

networks:
  carp:
    external: true
    name: "carp-${PROFILE}"
    driver: bridge

volumes:
  rabbitmq:
    name: "rabbitmq-${PROFILE}"
    external: true
  postgres:
    name: "postgres-${PROFILE}"
    external: true
  keycloak:
    name: "keycloak-${PROFILE}"
    external: true
  prometheus:
    name: "prometheus-${PROFILE}"
    external: True
